(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{553:function(t,s,a){"use strict";a.r(s);var e=a(6),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("发现有一段时间没写博客了，时间过得真的很快，转眼来到了2018，那么，今天就开启2018年的第一篇博客吧！")]),t._v(" "),a("h3",{attrs:{id:"先来讨论下js里的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#先来讨论下js里的"}},[t._v("#")]),t._v(' 先来讨论下js里的"=="')]),t._v(" "),a("p",[t._v("在js里面，使用==时，不同类型的值也可以被看作是相等的，这可能会让写js的萌新们感到困惑，为什么"),a("code",[t._v("'1' == 1")]),t._v("会被判断为true？还有"),a("code",[t._v("undefined == null")]),t._v('也会被判断为true等等,甚至还有一些更为神奇的“怪现象”，其实，这都是"=="操作符会触发js引擎进行'),a("strong",[t._v("隐式转换")]),t._v("，便产生了各种让萌新们感到神奇的现象（下文会举出demo，让你吃惊下，哈哈）"),a("br"),t._v("\n经过我查阅资料，用一个表格来概括下")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型(x)")]),t._v(" "),a("th",[t._v("类型(y)")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("x == toNumber(y)")])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("toNumber(x) == y")])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("任何类型")]),t._v(" "),a("td",[t._v("toNumber(x) == y")])]),t._v(" "),a("tr",[a("td",[t._v("任何类型")]),t._v(" "),a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("x == toNumber(y)")])]),t._v(" "),a("tr",[a("td",[t._v("字符串或数字")]),t._v(" "),a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("x == toPrimitive(y)")])]),t._v(" "),a("tr",[a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("字符串或数字")]),t._v(" "),a("td",[t._v("toPrimitive(x) == y")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("如果 x 和 y 是相同类型，javaScript会比较它们的值或对象值。其他没有列在这个表格中的情况都会返回false。")])]),t._v(" "),a("blockquote",[a("p",[t._v("toNumber 和 toPrimitive 方法是内部进行的，就是上文提到的"),a("strong",[t._v("隐式转换")])])]),t._v(" "),a("h4",{attrs:{id:"tonumber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tonumber"}},[t._v("#")]),t._v(" toNumber")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("值类型")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("true => 1,false => 0")])]),t._v(" "),a("tr",[a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("数字对应的值")])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("包含字母 => NaN,都是数字 => 对应数字")])]),t._v(" "),a("tr",[a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("Number(toPrimitive(vale))")])])])]),t._v(" "),a("h4",{attrs:{id:"toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive"}},[t._v("#")]),t._v(" toPrimitive")]),t._v(" "),a("p",[t._v("关于这个toPrimitive,来一段很有意思的js代码来展开讨论")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("居然返回的是true！有没有让你感到惊讶呢？\n先冷静下，看看为什么会返回true。其实，这都是js引擎在背后搞的鬼。首先，a是一个对象，根据上面的表格，当对象和数字进行"),a("code",[t._v("==")]),t._v("判断时，会进行"),a("code",[t._v("toPrimitive(a) == 1")]),t._v("判断，触发了toPrimitive，这个方法内部是这样的，先调用对象的valueOf方法，看看能不能返回原始值，有原始值就返回，不能的话，就接着调用toString的方法，有值的话就返回，没有的话，返回一个false。")]),t._v(" "),a("p",[t._v("看完了这段文字，那么上面的问题就很好理解为什么返回true了，首先，toPrimitive(a) 会调用"),a("code",[t._v("a.valueOf")]),t._v("方法，然而对象a自带了valueOf方法(可以理解为把原生的valueOf方法给覆盖了),上面有3个"),a("code",[t._v("==")]),t._v(",就触发了三次"),a("code",[t._v("toPrimitive(a)")]),t._v(",第一次调用valueOf, 返回的值为1，第二次返回的值为2，第三次返回的值为3，那么，最后就会返回true了！")]),t._v(" "),a("blockquote",[a("p",[t._v("总结：在有关 == 中，数字是大佬，如果 == 两边没有数字，就先找到能调用toNumber()方法的那个(boolean转数字的优先级最大)")])]),t._v(" "),a("blockquote",[a("p",[t._v("关于为什么 undefined == null 为true，是因为undefined是继承自null，并且undefined是一种数据类型，进行 == 判断时，js引擎会进行"),a("strong",[t._v("隐式转换")]),t._v("为true")])]),t._v(" "),a("h3",{attrs:{id:"关于-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-操作符"}},[t._v("#")]),t._v(' 关于"==="操作符')]),t._v(" "),a("p",[t._v("如果比较的两个值类型不同，比较的结果就是false。\n如果比较的两个值类型相同，结果会根据下表判断")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型(x)")]),t._v(" "),a("th",[t._v("值")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("x和y数值相同(除了NaN)")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("x和y是相同的字符")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("x和y都是true或false")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("x和y引用同一个对象")]),t._v(" "),a("td",[t._v("true")])])])]),t._v(" "),a("h3",{attrs:{id:"还有一些补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#还有一些补充"}},[t._v("#")]),t._v(" 还有一些补充")]),t._v(" "),a("p",[t._v("在ES5中，"),a("code",[t._v("===")]),t._v("是有点小bug的，比如")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("NaN不全等于NaN这个问题，在ES6中，提出了“同值相等”这一算法来解决这个问题，"),a("code",[t._v("Object.is()")]),t._v("就是实现这算法的API。它用来比较两个值是否严格相等。")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true ")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("blockquote",[a("p",[t._v("所以，在以后部署了ES6的环境中，尽量使用"),a("code",[t._v("Object.is")]),t._v('来判断，ES5中就使用"==="，少用"=="。')])])])}),[],!1,null,null,null);s.default=r.exports}}]);